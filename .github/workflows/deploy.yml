name: Deploy Rust API

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '20'
  SERVICE_NAME: 'rust-api'
  DEPLOY_DIR: '/opt/rust-api'

jobs:
  deploy:
    runs-on: self-hosted
    
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Kill existing SteamCMD processes
      run: |
        echo "🛑 Stopping any existing SteamCMD processes..."
        sudo pkill -f steamcmd || true
        sudo pkill -f steamcmd.sh || true
        sleep 2
        echo "✅ SteamCMD processes stopped"
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install system dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -qq
        sudo apt-get install -y -qq lib32gcc-s1 curl libcurl4-openssl-dev:i386
        
    - name: Install dependencies
      run: npm ci --production=false
      
    - name: Create environment file
      run: |
        cat > .env << EOF
        STEAM_USERNAME=${{ secrets.STEAM_USERNAME }}
        STEAM_PASSWORD=${{ secrets.STEAM_PASSWORD }}
        STEAM_APP_ID=${{ secrets.STEAM_APP_ID || '252490' }}
        PORT=${{ secrets.PORT || '3100' }}
        API_BASE_URL=${{ secrets.API_BASE_URL || 'http://localhost:3100' }}
        EOF
        

        
    - name: Copy application files
      run: |
        # Create deployment directory if it doesn't exist
        sudo mkdir -p ${{ env.DEPLOY_DIR }}
        sudo chown -R $USER:$USER ${{ env.DEPLOY_DIR }}
        
        # Preserve existing game-data directory if it exists
        if [ -d "${{ env.DEPLOY_DIR }}/game-data" ]; then
          echo "📁 Preserving existing game-data directory..."
          # Temporarily move it out of the way
          sudo mv ${{ env.DEPLOY_DIR }}/game-data ${{ env.DEPLOY_DIR }}/game-data-backup
        fi
        
        # Clean up old application files (but preserve game-data)
        sudo rm -rf ${{ env.DEPLOY_DIR }}/node_modules
        sudo rm -f ${{ env.DEPLOY_DIR }}/*.js
        sudo rm -f ${{ env.DEPLOY_DIR }}/package*.json
        sudo rm -f ${{ env.DEPLOY_DIR }}/.env
        
        # Copy only necessary application files
        cp -r package*.json ${{ env.DEPLOY_DIR }}/
        cp -r *.js ${{ env.DEPLOY_DIR }}/
        cp -r .env ${{ env.DEPLOY_DIR }}/
        cp -r node_modules ${{ env.DEPLOY_DIR }}/
        
        # Restore game-data directory
        if [ -d "${{ env.DEPLOY_DIR }}/game-data-backup" ]; then
          echo "📁 Restoring game-data directory..."
          sudo rm -rf ${{ env.DEPLOY_DIR }}/game-data
          sudo mv ${{ env.DEPLOY_DIR }}/game-data-backup ${{ env.DEPLOY_DIR }}/game-data
          sudo chown -R $USER:$USER ${{ env.DEPLOY_DIR }}/game-data
        fi
        
        # Ensure necessary directories exist
        mkdir -p ${{ env.DEPLOY_DIR }}/logs
        mkdir -p ${{ env.DEPLOY_DIR }}/cache
        
        # Set proper permissions
        chmod +x ${{ env.DEPLOY_DIR }}/*.js
        
        # Verify dependencies are available
        echo "🔍 Verifying dependencies..."
        if [ ! -d "${{ env.DEPLOY_DIR }}/node_modules" ]; then
          echo "❌ node_modules directory not found!"
          exit 1
        fi

        echo "✅ Dependencies verified successfully"
        
        # Install dependencies in deployment directory as backup
        echo "📦 Installing dependencies in deployment directory..."
        cd ${{ env.DEPLOY_DIR }}
        npm ci --production=false
        cd -
        
    - name: Create systemd service file
      run: |
        sudo tee /etc/systemd/system/${{ env.SERVICE_NAME }}.service << EOF
        [Unit]
        Description=Rust API Server
        After=network.target
        
        [Service]
        Type=simple
        User=$USER
        WorkingDirectory=${{ env.DEPLOY_DIR }}
        ExecStart=/usr/bin/node index.js
        Restart=always
        RestartSec=10
        StandardOutput=append:${{ env.DEPLOY_DIR }}/logs/app.log
        StandardError=append:${{ env.DEPLOY_DIR }}/logs/error.log
        Environment=NODE_ENV=production
        Environment=PORT=${{ secrets.PORT || '3100' }}
        
        [Install]
        WantedBy=multi-user.target
        EOF
        
    - name: Reload systemd and enable service
      run: |
        sudo systemctl daemon-reload
        sudo systemctl enable ${{ env.SERVICE_NAME }}
        
    - name: Stop existing service
      run: |
        sudo systemctl stop ${{ env.SERVICE_NAME }} 2>/dev/null || true
        
    - name: Start service
      run: |
        sudo systemctl start ${{ env.SERVICE_NAME }}
        
    - name: Wait for service to be ready
      run: |
        echo "⏳ Waiting for service to start and be ready..."
        # Wait longer for first startup (Rust download can take time)
        sleep 30
        
        # Check if service is running
        if sudo systemctl is-active --quiet ${{ env.SERVICE_NAME }}; then
          echo "✅ Service is running"
        else
          echo "❌ Service failed to start"
          sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager -l
          exit 1
        fi
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying API readiness..."
        # Try multiple times with increasing delays
        for i in {1..20}; do
          echo "Attempt $i/20: Checking readiness at http://localhost:${{ secrets.PORT || '3100' }}/ready"
          
          # Check the readiness endpoint
          if curl -f -s http://localhost:${{ secrets.PORT || '3100' }}/ready | grep -q '"ready":true'; then
            echo "✅ API is ready and responding to requests!"
            break
          else
            # Get current status for debugging
            echo "⏳ API not ready yet, current status:"
            curl -s http://localhost:${{ secrets.PORT || '3100' }}/ready | jq '.' || echo "Status endpoint not available yet"
            
            if [ $i -lt 20 ]; then
              echo "Waiting 60 seconds before next attempt..."
              sleep 60
            fi
          fi
        done
        
        # Final readiness check
        if ! curl -f -s http://localhost:${{ secrets.PORT || '3100' }}/ready | grep -q '"ready":true'; then
          echo "❌ API readiness verification failed after all attempts"
          echo "📊 Service logs:"
          sudo journalctl -u ${{ env.SERVICE_NAME }} --no-pager -n 50
          echo "📊 Current API status:"
          curl -s http://localhost:${{ secrets.PORT || '3100' }}/ready || echo "Status endpoint not available"
          exit 1
        fi
        
    - name: Deployment status
      run: |
        echo "🚀 Rust API deployed successfully!"
        echo "📍 Port: ${{ secrets.PORT || '3100' }}"
        echo "🌐 API Base URL: ${{ secrets.API_BASE_URL || 'http://localhost:3100' }}"
        echo "📚 Swagger Docs: http://localhost:${{ secrets.PORT || '3100' }}/api-docs"
        echo "📊 Service Status:"
        sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager -l
